
#include "cache.h"
#include "rap.h"
#include "triage.h"
#include "triage_reeses.h"
#include <map>

#define TRIAGE_FILL_LEVEL FILL_LLC
#define MAX_ALLOWED_DEGREE 1000

TriageConfig conf[NUM_CPUS];
TriageBase* prefetchers[NUM_CPUS];
RAH rah(2048);
uint64_t last_address[NUM_CPUS];

std::set<uint64_t>unique_addr;
std::map<uint64_t, uint64_t> total_usage_count;
std::map<uint64_t, uint64_t> actual_usage_count;
uint64_t nominal_prefetches, actual_prefetches, metadata_assoc;

//16K entries = 64KB
void CACHE::llc_prefetcher_initialize() 
{
    cout << NUM_CPUS << endl;
    for (int c = 0; c < NUM_CPUS; ++c) {
        conf[c].lookahead = 1;
        conf[c].degree = 1;
        conf[cpu].prefetch_queue_degree = conf[cpu].degree;
        conf[c].on_chip_assoc = 8;
        conf[c].training_unit_size = 10000000;
        conf[c].repl = TRIAGE_REPL_HAWKEYE;
    //    conf[c].repl = TRIAGE_REPL_PERFECT;
        conf[c].use_dynamic_assoc = false;
        conf[c].use_rap_assoc = true;
        conf[c].use_compressed_tag = false;
        conf[c].use_reeses = false;
        conf[c].use_layer_prediction = false;
        conf[c].reeses_footprint = false;
        conf[c].reeses_perfect_trigger = false;
        int assoc_config = ASSOC_CONFIG;
        int assoc = (assoc_config>>c) & 1;
        if (!assoc)
            conf[c].on_chip_assoc = 0;
        conf[c].on_chip_set = 32768;
        conf[c].log_on_chip_set = 15;
        std::cout << "ASSOC_CONFIG: " << ASSOC_CONFIG << std::endl;
        std::cout << "CPU " << c << " assoc: " << conf[c].on_chip_assoc << std::endl;

        if (conf[c].use_reeses)
            prefetchers[c] = new TriageReeses;
        else
            prefetchers[c] = new Triage;
        prefetchers[c]->set_conf(c, &conf[c]);

        rah.set_prefetchers(prefetchers);
        prefetchers[c]->set_rap(&rah);

        nominal_prefetches = 0, actual_prefetches = 0, metadata_assoc = 0;
    }
}


uint64_t CACHE::llc_prefetcher_operate(uint64_t addr, uint64_t pc, uint8_t cache_hit, uint8_t type, uint64_t metadata_in)
{
    if (type != LOAD) {
        return metadata_in;
    }

    //if (cache_hit) {
    //    return metadata_in;
    //}

    addr = (addr >> 6) << 6;
    rah.add_access(addr, pc, cpu, false);
    if(addr == last_address[cpu])
        return metadata_in;
    last_address[cpu] = addr;
    unique_addr.insert(addr);

    int i;
    prefetchers[cpu]->calculatePrefetch(pc, addr, cache_hit, MAX_ALLOWED_DEGREE, cpu);

    int prefetched = 0;
    for (i = 0; i < MAX_ALLOWED_DEGREE; ++i) {
        uint64_t pref_addr = prefetchers[cpu]->getNextPrefetchAddr(pc, addr);
        if (pref_addr == 0)
            break;
        rah.add_access(pref_addr, pc, cpu, true);
        PACKET test_packet;
        test_packet.address = pref_addr >> LOG2_BLOCK_SIZE;
        test_packet.full_addr = pref_addr;
        bool llc_hit = check_hit(&test_packet) != -1;
        //cout << "addr: " << addr << ", cache_hit: " << int(cache_hit) << ", llc_hit: " << llc_hit << endl;
        uint64_t md_in = addr;
        if(llc_hit)
            md_in = 0;
        ++total_usage_count[addr];
        if (!llc_hit){
           ++actual_usage_count[addr]; 
        }
        ++nominal_prefetches;
        int ret = prefetch_line(pc, addr, pref_addr, TRIAGE_FILL_LEVEL, md_in);
        if(ret)
        {
            ++actual_prefetches;
            if(++prefetched >= conf[cpu].degree)
                break;
        }
    }

    // Set cache assoc if dynamic
    unsigned total_assoc = 0;
    for (unsigned mycpu = 0; mycpu < NUM_CPUS; ++mycpu) {
        total_assoc += prefetchers[mycpu]->get_assoc();
    }
    total_assoc /= NUM_CPUS;
    // XXX: We only have everything in the same triage at the moment.
//    total_assoc = data[cpu].get_assoc();
    if (pc != 0)
        metadata_assoc += total_assoc;
    assert(total_assoc < LLC_WAY);
    if (conf[cpu].repl != TRIAGE_REPL_PERFECT)
        current_assoc = LLC_WAY - total_assoc;

    //cout << total_assoc << " " << current_assoc << endl;
    return metadata_in;
}

uint64_t CACHE::llc_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint64_t metadata_in)
{
//    if(prefetch) {
//        uint64_t next_addr;
//        bool next_addr_exists = prefetchers[cpu]->on_chip_data.get_next_addr(metadata_in, next_addr, 0, true);
        //assert(next_addr_exists);
//        cout << "Filled " << hex << addr << "  by " << metadata_in << " " << next_addr_exists << endl;
//    }
    return metadata_in;
}

void CACHE::llc_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " TRIAGE Stats:" << endl;

    prefetchers[cpu]->print_stats();

    std::map<uint64_t, uint64_t> total_pref_count;
    std::map<uint64_t, uint64_t> actual_pref_count;
    for (std::map<uint64_t, uint64_t>::iterator it = total_usage_count.begin(); it!=total_usage_count.end(); ++it) {
        total_pref_count[it->second]++;
    }
    for (std::map<uint64_t, uint64_t>::iterator it = actual_usage_count.begin(); it!=actual_usage_count.end(); ++it) {
        actual_pref_count[it->second]++;
    }

    cout << "Unique Addr Size: " << unique_addr.size() << endl;
//    cout << "Total Pref Count: " << endl;
//    for (unsigned i = 0; i < 100000; ++i) {
//        cout << i << ' ' <<  total_pref_count[i] << ' ' << actual_pref_count[i] << endl;
//    }
    cout << "NominalPrefetches: " << nominal_prefetches << endl;
    cout << "ActualPrefetches: " << actual_prefetches << endl;
    cout << "MetadataAssoc: " << metadata_assoc << endl;


    cout << "RAH Estimation Result: " << endl;
    for (int core = 0; core < NUM_CPUS; ++core) {
        for (int config = 0; config < RAH_CONFIG_COUNT; ++config) {
            cout << "RAH Core " << core << " Config " << config << " Traffic: " << rah.get_traffic(core, config) << endl;
            cout << "RAH Core " << core << " Config " << config << " Hits: " << rah.get_hits(core, config) << endl;
            cout << "RAH Core " << core << " Config " << config << " Accesses: " << rah.get_accesses(core, config) << endl;
        }
    }
    rah.print_stats();
}


